{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///effective-interest.min.js","webpack:///webpack/bootstrap 91f31ce5dbbe583c52af","webpack:///./src/EffectiveInterestCalculator.js","webpack:///./src/NewtonRaphson.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","NewtonRaphson","EffectiveInterestCalculator","value","principal","startDateString","payments","guess","values","days","startDate","Date","keys","forEach","date","push","Math","ceil","abs","getTime","fx","x","sum","day","idx","pow","fdx","run","payment","numberOfMonths","precision","errorLimit","previousValue","Number"],"mappings":"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","file":"effective-interest.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"EffectiveInterestCalculator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EffectiveInterestCalculator\"] = factory();\n\telse\n\t\troot[\"EffectiveInterestCalculator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"EffectiveInterestCalculator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EffectiveInterestCalculator\"] = factory();\n\telse\n\t\troot[\"EffectiveInterestCalculator\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NewtonRaphson = __webpack_require__(1);\n\t\n\tvar EffectiveInterestCalculator = function () {\n\t  function EffectiveInterestCalculator() {\n\t    _classCallCheck(this, EffectiveInterestCalculator);\n\t  }\n\t\n\t  _createClass(EffectiveInterestCalculator, null, [{\n\t    key: 'withSpecifiedPayments',\n\t\n\t\n\t    /**\n\t     * Get the interest when you know all the payments and their dates. Use this function when you have\n\t     * administration fees at the first payment and/or when payments are irregular.\n\t     *\n\t     * @param principal\n\t     * @param startDateString in format 'YYYY-mm-dd'\n\t     * @param payments        array with payment dates and values ['YYYY-mm-dd'=>int]\n\t     * @param guess           A guess what the interest may be. Between zero and one. Example 0.045\n\t     *\n\t     * @return float\n\t     */\n\t    value: function withSpecifiedPayments(principal, startDateString, payments, guess) {\n\t      var values = [-1 * principal];\n\t      var days = [1];\n\t      var startDate = new Date(startDateString);\n\t\n\t      Object.keys(payments).forEach(function (date) {\n\t        values.push(payments[date]);\n\t        days.push(1 + Math.ceil(Math.abs(new Date(date).getTime() - startDate.getTime()) / (1000 * 3600 * 24)));\n\t      });\n\t\n\t      var fx = function fx(x) {\n\t        var sum = 0;\n\t\n\t        days.forEach(function (day, idx) {\n\t          sum += values[idx] * Math.pow(1 + x, (days[0] - day) / 365);\n\t        });\n\t\n\t        return sum;\n\t      };\n\t\n\t      var fdx = function fdx(x) {\n\t        var sum = 0;\n\t\n\t        days.forEach(function (day, idx) {\n\t          sum += 1 / 365 * (days[0] - day) * values[idx] * Math.pow(1 + x, (days[0] - day) / 365 - 1);\n\t        });\n\t\n\t        return sum;\n\t      };\n\t\n\t      return NewtonRaphson.run(fx, fdx, guess);\n\t    }\n\t\n\t    /**\n\t     * Get the effective interest when the monthly payments are exactly the same.\n\t     *\n\t     * @param principal      The total loan amount (Principal)\n\t     * @param payment        The monthly payment\n\t     * @param numberOfMonths The number of months\n\t     * @param guess          A guess of what the interest might be. Interest as a number between zero and one.\n\t     *                       Example 0.045\n\t     *\n\t     * @return float\n\t     */\n\t\n\t  }, {\n\t    key: 'withEqualPayments',\n\t    value: function withEqualPayments(principal, payment, numberOfMonths, guess) {\n\t\n\t      var fx = function fx(x) {\n\t        return payment - payment * Math.pow(1 + x, -1 * numberOfMonths) - x * principal;\n\t      };\n\t\n\t      var fdx = function fdx(x) {\n\t        return numberOfMonths * payment * Math.pow(1 + x, -1 * numberOfMonths - 1) - principal;\n\t      };\n\t\n\t      return 12 * NewtonRaphson.run(fx, fdx, guess);\n\t    }\n\t  }]);\n\t\n\t  return EffectiveInterestCalculator;\n\t}();\n\t\n\tmodule.exports = EffectiveInterestCalculator;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Newton-Raphsons method to do a numerical analysis to find the effective interest.\n\t *\n\t * {@link https://en.wikipedia.org/wiki/Newton%27s_method}\n\t *\n\t * @author Tobias Nyholm <tobias.nyholm@gmail.com>\n\t */\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NewtonRaphson = function () {\n\t  function NewtonRaphson() {\n\t    _classCallCheck(this, NewtonRaphson);\n\t  }\n\t\n\t  _createClass(NewtonRaphson, null, [{\n\t    key: 'run',\n\t    value: function run(fx, fdx, guess) {\n\t      var precision = 4;\n\t      var errorLimit = Math.pow(10, -1 * precision);\n\t      var previousValue = 0;\n\t\n\t      do {\n\t        guess = Number(guess);\n\t        previousValue = Number(guess);\n\t        guess = previousValue - Number(fx(guess)) / Number(fdx(guess));\n\t      } while (Math.abs(guess - previousValue) > errorLimit);\n\t\n\t      return guess;\n\t    }\n\t  }]);\n\t\n\t  return NewtonRaphson;\n\t}();\n\t\n\tmodule.exports = NewtonRaphson;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** effective-interest.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 91f31ce5dbbe583c52af\n **/","'use strict';\n\nlet NewtonRaphson = require('NewtonRaphson');\n\nclass EffectiveInterestCalculator {\n\n  /**\n   * Get the interest when you know all the payments and their dates. Use this function when you have\n   * administration fees at the first payment and/or when payments are irregular.\n   *\n   * @param principal\n   * @param startDateString in format 'YYYY-mm-dd'\n   * @param payments        array with payment dates and values ['YYYY-mm-dd'=>int]\n   * @param guess           A guess what the interest may be. Between zero and one. Example 0.045\n   *\n   * @return float\n   */\n  static withSpecifiedPayments(principal, startDateString, payments, guess) {\n    let values = [-1 * principal];\n    let days = [1];\n    let startDate = new Date(startDateString);\n\n    Object.keys(payments).forEach(function (date) {\n      values.push(payments[date]);\n      days.push(1 + Math.ceil(Math.abs((new Date(date)).getTime() - startDate.getTime()) / (1000 * 3600 * 24)));\n    });\n\n    let fx = function (x) {\n      let sum = 0;\n\n      days.forEach(function (day, idx) {\n        sum += values[idx] * Math.pow(1 + x, (days[0] - day) / 365);\n      });\n\n      return sum;\n    };\n\n    let fdx = function (x) {\n      let sum = 0;\n\n      days.forEach(function (day, idx) {\n        sum += (1 / 365) * (days[0] - day) * values[idx] * Math.pow(1 + x, ((days[0] - day) / 365) - 1);\n      });\n\n      return sum;\n    };\n\n    return NewtonRaphson.run(fx, fdx, guess);\n  }\n\n  /**\n   * Get the effective interest when the monthly payments are exactly the same.\n   *\n   * @param principal      The total loan amount (Principal)\n   * @param payment        The monthly payment\n   * @param numberOfMonths The number of months\n   * @param guess          A guess of what the interest might be. Interest as a number between zero and one.\n   *                       Example 0.045\n   *\n   * @return float\n   */\n  static withEqualPayments(principal, payment, numberOfMonths, guess) {\n\n    let fx = function (x) {\n      return payment - payment * Math.pow(1 + x, -1 * numberOfMonths) - x * principal;\n    };\n\n    let fdx = function (x) {\n      return numberOfMonths * payment * Math.pow(1 + x, -1 * numberOfMonths - 1) - principal;\n    };\n\n    return 12 * NewtonRaphson.run(fx, fdx, guess);\n  }\n}\n\nmodule.exports = EffectiveInterestCalculator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EffectiveInterestCalculator.js\n **/","'use strict';\n\n/**\n * Newton-Raphsons method to do a numerical analysis to find the effective interest.\n *\n * {@link https://en.wikipedia.org/wiki/Newton%27s_method}\n *\n * @author Tobias Nyholm <tobias.nyholm@gmail.com>\n */\nclass NewtonRaphson {\n\n  static run(fx, fdx, guess) {\n    let precision = 4;\n    let errorLimit = Math.pow(10, -1 * precision);\n    let previousValue = 0;\n\n    do {\n      guess = Number(guess);\n      previousValue = Number(guess);\n      guess = previousValue - (Number(fx(guess)) / Number(fdx(guess)));\n    } while (Math.abs(guess - previousValue) > errorLimit);\n\n    return guess;\n  }\n}\n\nmodule.exports = NewtonRaphson;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/NewtonRaphson.js\n **/"],"sourceRoot":""}