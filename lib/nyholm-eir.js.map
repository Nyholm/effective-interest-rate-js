{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 73edc6979655718e5f81","webpack:///./src/EffectiveInterestCalculator.js","webpack:///./src/NewtonRaphson.js"],"names":["NewtonRaphson","require","EffectiveInterestCalculator","principal","startDateString","payments","guess","values","days","startDate","Date","Object","keys","forEach","date","push","Math","ceil","abs","getTime","fx","x","sum","day","idx","pow","fdx","run","payment","numberOfMonths","module","exports","precision","errorLimit","previousValue","Number"],"mappings":"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","file":"nyholm-eir.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"EffectiveInterestCalculator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EffectiveInterestCalculator\"] = factory();\n\telse\n\t\troot[\"EffectiveInterestCalculator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 73edc6979655718e5f81\n **/","'use strict';\n\nlet NewtonRaphson = require('NewtonRaphson');\n\nclass EffectiveInterestCalculator {\n\n  /**\n   * Get the interest when you know all the payments and their dates. Use this function when you have\n   * administration fees at the first payment and/or when payments are irregular.\n   *\n   * @param principal\n   * @param startDateString in format 'YYYY-mm-dd'\n   * @param payments        array with payment dates and values ['YYYY-mm-dd'=>int]\n   * @param guess           A guess what the interest may be. Between zero and one. Example 0.045\n   *\n   * @return float\n   */\n  static withSpecifiedPayments(principal, startDateString, payments, guess) {\n    let values = [-1 * principal];\n    let days = [1];\n    let startDate = new Date(startDateString);\n\n    Object.keys(payments).forEach(function (date) {\n      values.push(payments[date]);\n      days.push(1+ Math.ceil(Math.abs((new Date(date)).getTime() - startDate.getTime()) / (1000 * 3600 * 24)));\n    });\n\n    let fx = function (x) {\n      let sum = 0;\n\n      days.forEach(function (day, idx) {\n        sum += values[idx] * Math.pow(1 + x, (days[0] - day) / 365);\n      });\n\n      return sum;\n    };\n\n    let fdx = function (x) {\n      let sum = 0;\n\n      days.forEach(function (day, idx) {\n        sum += (1 / 365) * (days[0] - day) * values[idx] * Math.pow(1 + x, ((days[0] - day) / 365) - 1);\n      });\n\n      return sum;\n    };\n\n    return NewtonRaphson.run(fx, fdx, guess);\n  }\n\n  /**\n   * Get the effective interest when the monthly payments are exactly the same.\n   *\n   * @param principal      The total loan amount (Principal)\n   * @param payment        The monthly payment\n   * @param numberOfMonths The number of months\n   * @param guess          A guess of what the interest might be. Interest as a number between zero and one.\n   *                       Example 0.045\n   *\n   * @return float\n   */\n  static withEqualPayments(principal, payment, numberOfMonths, guess) {\n\n    let fx = function (x) {\n      return payment - payment * Math.pow(1 + x, -1 * numberOfMonths) - x * principal;\n    };\n\n    let fdx = function (x) {\n      return numberOfMonths * payment * Math.pow(1 + x, -1 * numberOfMonths - 1) - principal;\n    };\n\n    return 12 * NewtonRaphson.run(fx, fdx, guess);\n  }\n}\n\nmodule.exports = EffectiveInterestCalculator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EffectiveInterestCalculator.js\n **/","'use strict';\n\n/**\n * Newton-Raphsons method to do a numerical analysis to find the effective interest.\n *\n * {@link https://en.wikipedia.org/wiki/Newton%27s_method}\n *\n * @author Tobias Nyholm <tobias.nyholm@gmail.com>\n */\nclass NewtonRaphson {\n\n  static run(fx, fdx, guess) {\n    let precision = 4;\n    let errorLimit = Math.pow(10, -1 * precision);\n    let previousValue = 0;\n\n    do {\n      guess = Number(guess);\n      previousValue = Number(guess);\n      guess = previousValue - (Number(fx(guess)) / Number(fdx(guess)));\n    } while (Math.abs(guess - previousValue) > errorLimit);\n\n    return guess;\n  }\n}\n\nmodule.exports = NewtonRaphson;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/NewtonRaphson.js\n **/"],"sourceRoot":""}